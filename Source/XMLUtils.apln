:Namespace XMLUtils

    ⎕IO←⎕ML←1

    ∇ r←Version
      r←'XMLUtils' '1.1.2' '2025-08-26'
    ∇

    ∇ r←Documentation
      r←'See https://bpbecker.github.io/XMLUtils'
    ∇

    ∇ xml←HTMLtoXHTML2 html;h;tid
    ⍝ use HTMLRenderer and JavaScript to parse HTML to XHTML
    ⍝ html - HTML character vector
    ⍝ xml  - ⎕XML matrix format of XHTML
      {}⎕TGET ⎕TPOOL
      tid←html scrape&''
      xml←⎕XML xml←⊃⎕TGET 42
      ⎕TKILL tid
    ∇

    ∇ {html}scrape args;xml;h
    ⍝ "scrape" a web page's content by injecting a WebSocket and sending back the XHTMLified document contents
      :If 0∊⍴args
          'h'⎕WC'HTMLRenderer'('HTML'html)('Event' 'WebSocketReceive'((⊃⎕XSI),'&'))('Visible' 0)
          ⎕DL 1 ⍝ give HTMLRenderer a chance to load
          h.ExecuteJavaScript'var ws = new WebSocket("wss://dyalog_root/")'
          ⎕DL 1 ⍝ give the WebSocket a change to connect
          h.ExecuteJavaScript'ws.send(new XMLSerializer().serializeToString(new DOMParser().parseFromString(document.documentElement.innerHTML,"text/html")))'
          ⎕DQ'h'
      :Else
          :If 'WebSocketReceive'≡2⊃args
              xml←4⊃args
              xml ⎕TPUT 42
          :EndIf
      :EndIf
    ∇

    ∇ r←{verbose}HTMLtoXHTML html;lco;beginsWith;last;fixAmpersand;fixAttribute;inScript;fixScript;quoteAttr;closes;inds;noclose;msg;pos;scriptInsert;next;fixComment;char;fixAttributeCharacter;makeEntity;fixBadTag;fixMismatch;expect;lastpos;parsePos;endsWith;fixOrphan;fixImbalance;lc;tag;getTag;fixOrphanedData;origTag;tagPos;tagpos;lasttagpos;newTag;fixTagEnd
    ⍝ attempt to convert a character vector containing HTML to ⎕XML matrix format XHTML
    ⍝ html    - HTML character vector
    ⍝ verbose - 1 = display intermediate ⎕XML errors, 2 = display and stop on error
    ⍝ xml     - ⎕XML matrix format of XHTML
     
      verbose←{6::⍵ ⋄ verbose}0
    ⍝ define some core utilities
      lc←{2::0(819⌶)⍵ ⋄ ¯3 ⎕C ⍵}  ⍝ lowercase
      lco←{(lc ⍺)⍺⍺(lc ⍵)}        ⍝ lowercase operator (for case-insensitive operations)
      beginsWith←{⍵≡(≢⍵)↑⍺}       ⍝ does ⍺ begin with ⍵?
      endsWith←{⍵≡(-≢⍵)↑⍺}        ⍝ does ⍺ end with ⍵?
      last←{⍸⌽<\⌽⍵⍷⍺↑⍺⍺}          ⍝ position of the last ⍵ before ⍺⍺[⍺]
      next←{⍸<\⍵⍷⍺↓⍺⍺}            ⍝ position of the next ⍵ after ⍺⍺[⍺]
      parsePos←{∨/'at end of text;'⍷⍺:⍵ ⋄ ⊃⊃(//)⎕VFI ⍺∩⎕D,' '} ⍝ parse the position information from a ⎕XML error message
     
    ⍝ now define utilities to deal with specific types of HTML anomalies
      fixAmpersand←{ ⍝ & should be the HTML entity &amp;
          ∊((⊂'&amp;')@(⍺(⍵ last)'&'))⍵
      }
     
      fixAttribute←{ ⍝ fix attributes without = (e.g. readonly → readonly="readonly")
          inds←¯2↑⍸' />'∊⍨⍺↑⍵
          ∊((⊂2⌽'"',⍵[inds[2]],'="',⍵[inds[1]+⍳¯1+-/⌽inds])@(2⊃inds))⍵
      }
      inScript←{ ⍝ did the exception occur inside a script element?
          b←⍸'<script'⍷⍵
          e←⍸'</script>'⍷⍵
          _←0∧.<e-b ⍝ paranoia
          0=ind←b⍸⍺:⍬
          i1←b[ind]+'>'⍳⍨b[ind]↓⍵ ⍝ insert point 1
          i2←e[ind] ⍝ insert point 2
          ((i1<⍺)∧⍺<i2)/i1,i2 ⍝ returns script bounds or empty if not in script
      }
      fixScript←{ ⍝ escape script element contents
          (i1 i2)←⍺
          ∊((⊂,∘'//<![CDATA[')@i1)((⊂'//]]>'∘,)@i2)⍵
      }
      quoteAttr←{ ⍝ quote unquoted attribute values
          _←÷'='=⍵[⍺-1] ⍝ paranoia
          e←⍺+⌊/(⍺↓⍵)⍳' >'
          ∊((⊂'"'∘,)¨@(⍺,e))⍵
      }
      fixComment←{   ⍝ '--' inside of comments are a no-no,so replace them with '=='
          t←+/∧\'-'=⍺↓⍵   ⍝ trailing -
          l←+/∧\'-'=⌽⍺↑⍵  ⍝ leading -
          '!'=⍵[⍺-l]:('='@((⍺-l-2)+⍳t+l-2))⍵ ⍝ preserve beginning of comment
          '>'=⍵[1+⍺+t]:('='@((⍺-l)+⍳t+l-2))⍵ ⍝ preserve end of comment
          ('='@((⍺-l)+⍳t+l))⍵ ⍝ otherwise replace them all
      }
      fixAttributeCharacter←{ ⍝ fix characters in attributes that should be HTML entities
          err←⊂↓'EM' 'EN' 'Message',⍪⎕DMX.(EM EN Message)
          pos char←⍺
          char≠⍵[pos]:⎕SIGNAL err
          ∊((⊂makeEntity char)@pos)⍵
      }
      makeEntity←{ ⍝ get the HTML entity format for ⍵
          ¯4↓3↓⎕XML 1 3⍴0 'z'⍵
      }
      fixBadTag←{ ⍝ a bad tag error is likely a stray < that should be &lt;
          '<'≠⍵[⍺-1]:∘∘∘ ⍝ expected '<' at this location
          ∊((⊂'&lt;')@(⍺-1))⍵
      }
      fixMismatch←{ ⍝ mismatches occur when an ancestor tag is closed before a descendent
          err←⊂↓'EM' 'EN' 'Message',⍪⎕DMX.(EM EN Message)
          (pos expect)←⍺
          '>'≠pos⊃⍵:⎕SIGNAL err
          tag←{⍵↓⍨0⌈¯1+¯1↑⍸'<'=⍵}pos↑⍵
          0=len←⊃'<\/[a-zA-Z][a-zA-Z0-9\-\_\:\.]*>|<[a-zA-Z][a-zA-Z0-9\-\_\:\.]*\/>'⎕S 1⊢tag:⎕SIGNAL err
          ((pos-len)↑⍵),expect,pos↓⍵
      }
      fixImbalance←{ ⍝ ⎕XML expected a particular closing tag, so we insert it
          err←⊂↓'EM' 'EN' 'Message',⍪⎕DMX.(EM EN Message)
          (pos expect)←⍺
          pos≠≢⍵:⎕SIGNAL err
          ⍵,expect
      }
      fixOrphan←{ ⍝ orphaned closing tag (was previously closed), remove it
          err←⊂↓'EM' 'EN' 'Message',⍪⎕DMX.(EM EN Message)
          ⍺=≢⍵:⍵↑⍨(⍺-1)(⍵ last)'>'
          tag←{⍵↓⍨0⌈¯1+¯1↑⍸'<'=⍵}⍺↑⍵
          0=len←⊃'<\/\w*>|<\w*\/>'⎕S 1⊢tag:⎕SIGNAL err
          ((⍺-len)↑⍵),⍺↓⍵
      }
      fixOrphanedData←{ ⍝ orphaned data at the end, move last closing tag to end
          err←⊂↓'EM' 'EN' 'Message',⍪⎕DMX.(EM EN Message)
          ind←⍺(⍵ last)'</'
          tag←ind getTag ⍵
          ((ind-1)↑⍵),(≢tag)⌽(ind-1)↓⍵
      }
      fixTagEnd←{ ⍝ 'Attribute, ''>'' or ''/>'' expected'
          '\>'≡2↑(⍺-1)↓⍵:w⊣w[⍺]←'/'⊣w←⍵
          ((⍺-1)↑⍵),'>',(⍺-1)↓⍵
      }
      getTag←{ ⍝ get the tag at this position
          ⍝ ⍺=pos
          ⍝ ⍵=html
          ⍝ ←=[1] tag pos [2] tag content
          3::'' ⍝ index error, no tag
          ⍵{⍵[2],⊂(⍵[2]-1)↓⍵[1]↑⍺}(⍺+(⍵[⍺]≠'>')×⍺(⍵ next)'>'),⍺(⍵ last)'<'}
     
      html~←⎕UCS 11 ⍝ remove vertical tab characters
      html↓⍨←-+/∧\(⌽html)∊⎕UCS 32 10 13 ⍝ remove trailing whitespace
      html←'<\/br>'⎕R'<br/>'⊢html ⍝ fix typo for <br/>
      closes←⍸'>'=html
      noclose←(⊂'[\s>]'),⍨¨'<',¨'area' 'base' 'basefont' 'br' 'br' 'col' 'frame' 'hr' 'hr' 'img' 'input' 'isindex' 'link' 'meta' 'param' ⍝ elements with no closing tag
      inds←closes/⍨(≠∧×)(1+noclose ⎕S 0⍠'Mode' 'D'⊢html)⍸closes
      html[inds[⍸'/'≠html[inds-1]]]←⊂'/>'
      html←∊html
      tagpos←pos←0
     Try:
      lastpos←pos ⋄ lasttagpos←tagpos
      :Trap 11
          r←(⎕XML⍠('Markup' 'Preserve')('UnknownEntity' 'Preserve'))html
      :Else
          verbose{0=⍺:{}⍵ ⋄ ⎕←⍵}msg←⎕DMX.Message
          pos←msg parsePos≢html
          ((verbose≠2)↓(1+⊃⎕LC),⎕STOP⊃⎕SI)⎕STOP⊃⎕SI
          ((⎕STOP⊃⎕SI)~⊃⎕LC)⎕STOP⊃⎕SI
          :If pos=≢html
              :If msg beginsWith'Tag mismatch at end of text;'
                  :If msg endsWith'none expected'
                      html↓⍨←-(⌽html)⍳'<'
                      pos←≢html
                      →Try
                  :ElseIf html endsWith'</html>'
                      html←(¯7↓html),(msg↓⍨⊢/⍸msg=' '),'</html>'
                      →Try
                  :Else
                      ∘∘∘
                  :EndIf
              :Else
                  ∘∘∘
              :EndIf
          :Else
              (tagpos tag)←pos getTag html
          :EndIf
     
          :If tagpos≠lasttagpos ⋄ origTag←tag ⋄ :EndIf ⍝ preserve original tag
          :If (pos=lastpos)>(msg endsWith'none expected')∨msg beginsWith'Attribute, ''>'' or ''/>'' expected' ⍝ error in same position?
              :If origTag≡newTag←lastChance origTag
                  ∘∘∘
              :Else
                  html←((tagpos-1)↑html),newTag,(¯1+tagpos+≢tag)↓html
                  pos←lastpos
                  →Try
              :EndIf
          :ElseIf ~0∊⍴scriptInsert←pos inScript html
              html←scriptInsert fixScript html
              →Try
          :ElseIf msg beginsWith'Invalid entity reference'
              html←pos fixAmpersand html
              →Try
          :ElseIf msg beginsWith'''='' expected'
              html←pos fixAttribute html
              →Try
          :ElseIf msg beginsWith'Quote expected at start'
              html←pos quoteAttr html
              →Try
          :ElseIf msg beginsWith'Invalid ''--'' in comment'
              html←pos fixComment html
              →Try
          :ElseIf (4↓msg)beginsWith'not allowed in attribute'
              char←2⊃msg ⍝ the offending character
              html←(pos char)fixAttributeCharacter html
              →Try
          :ElseIf msg beginsWith'Invalid tag name'
              html←pos fixBadTag html
              →Try
          :ElseIf msg endsWith'none expected'
              html←pos fixOrphan html
              →Try
          :ElseIf msg beginsWith'Tag mismatch'
              expect←⊃⊢/' '(≠⊆⊢)msg ⍝ expected tag
              html←(pos expect)fixMismatch html
              →Try
          :ElseIf msg beginsWith'Tag imbalance'
              expect←⊃⊢/' '(≠⊆⊢)msg ⍝ expected tag
              html←(pos expect)fixImbalance html
              →Try
          :ElseIf msg beginsWith'Orphaned data'
              html←pos fixOrphanedData html
              →Try
          :ElseIf msg beginsWith'Attribute, ''>'' or ''/>'' expected'
              html←pos fixTagEnd html
              →Try
          :Else
              ∘∘∘ ⍝ unhandled exception
          :EndIf
      :EndTrap
    ∇

    ∇ r←lastChance tag;ind;name;close;end;attrs;new;attr;aname;endq;a;val
    ⍝ last ditch effort to clean up a messed up tag
      r←tag
      →0⍴⍨(≢tag)<ind←⌊/tag⍳' />'
      name←tag↑⍨ind-1
      →0⍴⍨tag[ind]∊'/>'
      end←-+/∧\'>/'=⌽¯2↑tag
      close←end↑tag
      attrs←' ',⍨{(' '=⊃⍵)↓⍵/⍨2∨/0,⍨' '≠⍵}ind↓end↓tag
      new←' '
      :While ~0∊⍴attrs
          ind←⌊/attrs⍳' ='
          attr←(ind-1)↑attrs
          :If ' '=attrs[ind]
              new,←attr,'="',attr,'" '
              attrs←ind↓attrs
          :Else
              :If 0∊⍴aname←(ind-1)↑attrs ⍝ no attribute name?
                  →0⊣r←tag ⍝ bail out
              :Else
                  :Select (attrs,' ')[ind+1]
                  :Case ' '
                      new,←aname,'="',aname,'" '
                      attrs←(ind+1)↓attrs
                  :Case '"'
                      endq←{⊢⌿⍸(⍵='"')∧~∨\⍵='='}ind↓attrs ⍝ ending quote
                      val←1⌽'""',∊(⊂'&quot;')@(=∘'"')⊢1↓¯1↓endq↑ind↓attrs
                      new,←aname,'=',val,' '
                      attrs←(⊢↓⍨' '=⊃)(ind+endq)↓attrs
                  :Else
                      ∘∘∘
                  :EndSelect
              :EndIf
          :EndIf
      :EndWhile
      r←name,new,close
    ∇

    ∇ r←xml Xfind specs;level;element;content;attr;value;to;max;parseLevel;lc;lco;contains;attrHits;attrMask;valueHits;type;types
     ⍝ specs is delimited (first char denotes delimiter) list of '/level/element/content/attribute/value/type'
     ⍝ level[+|-[n]] : 3 matches level 3, 3+ matches 3 and higher, 3- matches 3 and lower, 3-5 matches 3 thru 5
     ⍝ element: space delimited list of element names
     ⍝ content: uses case insensitive
     ⍝ attribute: attribute name (if value is not present, use only the existence of attribute)
     ⍝ value: attribute value: uses case insensitive (if attribute is not present, search all attribute values)
     ⍝ type: numeric value(s) to match on [;5] (see ⎕XML documentation).
      r←(≢xml)⍴1
      →exit⍴⍨0∊⍴specs←1↓¨(specs=⊃specs)⊂specs
      (level element content attr value type)←6↑specs,6⍴⊂''
      lc←{2::0(819⌶)⍵ ⋄ ⎕C ⍵}
      lco←{(lc ⍺)⍺⍺ lc ⍵}
      contains←{∨/⍺⍷lco ⍵}
      :If ~0∊⍴level
          'Bad level specification'⎕SIGNAL 11/⍨~∧/level∊⎕D,' ,-+'
          max←⌈/xml[;1]
          parseLevel←{
              to←{⍺←⍵ ⋄ ⍺,⍺+(¯1*⍺>⍵)×⍳|⍺-⍵}
              p←{0∊⍴⍵:⍺ m max ⋄ ⍺ to ⍵}
              m←{0∊⍴⍵:⍺ to 0 ⋄ ⍺ to ⍵}
              v←∊((⊂' p ')@('+'∘=))⍵
              v←∊((⊂' m ')@('-'∘=))v
              v←(' '@(','∘=))v
              v,←('mp'∊⍨⊢/v~' ')/'⍬'
              ⍎v
          }
          r∧←r\(r/xml[;1])∊max parseLevel level
          →exit⍴⍨~∨/r
      :EndIf
      :If ~0∊⍴element
          r∧←r\(r/xml[;2])∊lco element⊆⍨element≠' '
          →exit⍴⍨~∨/r
      :EndIf
      :If ~0∊⍴content
          r∧←r\content∘contains¨r/xml[;3]
          →exit⍴⍨~∨/r
      :EndIf
      attrHits←⍬
      :If ~0∊⍴attr
          attrHits←(attr⊆⍨attr≠' ')∘{⍵[;1]∊⍺}¨r/xml[;4]
          r∧←r\attrMask←∨/¨attrHits
          →exit⍴⍨~∨/r
      :EndIf
      :If ~0∊⍴value
          valueHits←∨/¨value∘{∨/¨(⊂⍺)⍷lco¨⍵[;2]}¨r/xml[;4]
          :If ~0∊⍴attrHits
              valueHits∧←attrMask/attrHits
          :EndIf
          r∧←r\∨/¨valueHits
          →exit⍴⍨~∨/r
      :EndIf
      :If ~0∊⍴type
          'Bad type specification'⎕SIGNAL 11/⍨~∧/type∊⎕D,' '
          types←∪⍎type
          r∧←r\(r/xml[;5])∊types
      :EndIf
     
     exit:
    ∇

      Xselect←{
      ⍝ ⍺⍺ - xml matrix
      ⍝ ⍺  - Boolean indicating whether to include descendents
      ⍝ ⍵  - Boolean of selected nodes (result from Xfind)
      ⍝ ←  - nodes+descendents
          ⍺←1
          ⍺:{⍵⌿⍨∧\1,1↓⍵[;1]>⊃⍵[;1]}¨((1@(⍸⍵))(≢⍺⍺)⍴0)⊂[1]⍺⍺
          1⊂[1]⍵⌿⍺⍺
      }

    ∇ xml←repl(xml Xreplace)elements;mask;n;i;inds;rep;ind;elms
    ⍝ xml      - xml matrix or string
    ⍝ repl     - new xml (or string(s)) for elements
    ⍝ elements - boolean marking the elements in xml (or string for Xfind)
    ⍝ ←  - updated xml matrix
      xml←⎕XML⍣(''=⍥⎕DR xml)⊢xml
      elms←xml Xselect elements←xml Xfind⍣(~2|⎕DR elements)⊢elements
      repl←⎕XML⍣(''=⍥⎕DR repl)⊢repl
      repl←⊂⍣(2=≢⍴repl)⊢repl
      ⎕SIGNAL 5/⍨(≢repl)(~∊)1,n←≢inds←⍸elements
      repl←n/⍣(1=≢repl)⊢repl
      mask←(≢xml)⍴1
      mask[∊inds+∘⍳¨¯1+≢¨elms]←0
      repl←repl{⍉(⍵-⍥⊃⍺)∘+@1⊢⍉⍺}¨xml[inds;1]
      xml←↑⊃,/↓¨mask/repl@inds⊢↓xml
    ∇

    ∇ xml←ins(xml Xinsert)elements;n;inds;mask;levels
    ⍝ insert into xml matrix
    ⍝ xml      - xml matrix or string
    ⍝ ins      - xml (or strings) to insert
    ⍝ elements - boolean marking the elements after which to insert (or string for Xfind)
    ⍝ ←        - updated xml matrix
      xml←⎕XML⍣(''=⍥⎕DR xml)⊢xml
      elements←xml Xfind⍣(~2|⎕DR elements)⊢elements
      ins←⎕XML⍣(''=⍥⎕DR ins)⊢ins
      ins←⊂⍣(2=≢⍴ins)⊢ins
      ⎕SIGNAL 5/⍨(≢ins)(~∊)1,n←≢inds←⍸elements
      ins←n/⍣(1=≢ins)⊢ins
      mask←(≢xml)⍴1
      mask[inds]←{⊂1↑⍨1+≢⍵}¨ins
      mask←∊mask
      levels←xml[inds;1]
      xml←mask⍀xml
      ins←levels{w←⍵ ⋄ w[;1]←⍺+1+(⊢-⌊/)w[;1] ⋄ w}¨ins
      xml[⍸~mask;]←↑⊃,/↓¨ins
    ∇

    ∇ xml←{kids}(xml Xdelete)elements;mask;bal
    ⍝ delete xml elements
    ⍝ xml      - xml matrix or string
    ⍝ elements - boolean marking the elements to be deleted (or string for Xfind)
    ⍝ ←        - updated xml matrix
      bal←{ ⍝ rebalance levels after deletion
          ⍺←⍬
          0∊⍴⍵:⍺
          0∊⍴⍺:(⊃⍵)∇ 1↓⍵
          ¯1>(⊃¯1↑⍺)-⊃⍵:(⍺,1+⊢/⍺)∇ 1↓⍵
          (⍺,⊃⍵)∇ 1↓⍵
      }
      kids←{6::⍵ ⋄ kids}1
      xml←⎕XML⍣(''=⍥⎕DR xml)⊢xml
      elements←xml Xfind⍣(~2|⎕DR elements)⊢elements
      :If 0=kids ⍝ if not including descendent elements
          xml⌿⍨←~elements ⍝ just remove the marked ones
          xml[;1]←bal xml[;1] ⍝ and rebalance the levels
      :Else
          mask←1⍴⍨≢xml
          mask[∊xml[;1]∘{⍵+0,⍳+/∧\⍺[⍵]<⍵↓⍺}¨⍸elements]←0
          xml⌿⍨←mask
      :EndIf
    ∇


      Xattr←{
     ⍝ ⍺ - case-insensitive comparison?
     ⍝ ⍺⍺ - xml matrix/matrices
     ⍝ ⍵ - attribute name to search for
     ⍝ ← - values (if any) for that attribute
          0∊⍴⍺⍺:''
          ⍺←0
          4=|≡⍺⍺:(⍺((⊃⍺⍺)∇∇)¨⊂⍵),⊃⍺((1↓⍺⍺)∇∇)¨⊂⍵
          2=|≡⍵:⍺(⍺⍺ ∇∇)¨⍵
          ' '∊⍵:⍺(⍺⍺ ∇∇)¨' '(≠⊆⊢)⍵
          regex←{∊1⌽'$^',∊('.',(⊂'.+'),⍵)[('?*',⍵)⍳⍵]} ⍝ convert wildcard to regex
          ic←⍺
          ⍵{⍵[(regex ⍺)⎕S{1+⍵.BlockNum}⍠'IC'ic⊢⍵[;1];2]}↑⊃,/↓¨⍺⍺[;4]
      }

      Xattrval←{
      ⍝ ⍺ - xml matrix
      ⍝ ⍵ - Xfind selection with attribute name populated. e.g. '/2/a//href' or just '////src'
      ⍝ ← - vector of vectors of matching attribute values
          ⍺←0
          0∊⍴⍺⍺:''
          0∊⍴⍵:''
          ⍺((↑⊃,/↓¨⍺⍺ Xselect ⍺⍺ Xfind ⍵)Xattr)1↓4⊃{⍵↑⍨4⌈≢⍵}(⊢⊂⍨⊢=⊃)⍵
      }

:EndNamespace
